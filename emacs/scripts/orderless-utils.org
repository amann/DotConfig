#+title: Orderless Utils
#+PROPERTY: header-args:emacs-lisp :tangle ./orderless-utils.el :mkdirp yes

* Orderless

** Matching Styles

#+begin_src emacs-lisp
    (defun orderless--strict-*-initialism (component &optional anchored)
      "Match a COMPONENT as a strict initialism, optionally ANCHORED.
  The characters in COMPONENT must occur in the candidate in that
  order at the beginning of subsequent words comprised of letters.
  Only non-letters can be in between the words that start with the
  initials.

  If ANCHORED is `start' require that the first initial appear in
  the first word of the candidate.  If ANCHORED is `both' require
  that the first and last initials appear in the first and last
  words of the candidate, respectively."
      (orderless--separated-by
	  '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)))
	(cl-loop for char across component
		 collect `(seq word-start ,char))
	(when anchored
	  '(seq (group buffer-start) (zero-or-more (not alpha))))
	(when (eq anchored 'both)
	  '(seq (zero-or-more alpha) word-end (zero-or-more (not alpha)) eol))))

    (defun orderless-strict-initialism (component)
      "Match a COMPONENT as a strict initialism.
  This means the characters in COMPONENT must occur in the
  candidate in that order at the beginning of subsequent words
  comprised of letters.  Only non-letters can be in between the
  words that start with the initials."
      (orderless--strict-*-initialism component))
#+end_src

** Dispatchers
#+begin_src emacs-lisp  
    (defun prot-orderless-literal-dispatcher (pattern _index _total)
      "Literal style dispatcher using the equals sign as a suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "=" pattern)
        `(orderless-literal . ,(substring pattern 0 -1))))

    (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
      "Leading initialism  dispatcher using the comma suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "," pattern)
        `(orderless-strict-initialism . ,(substring pattern 0 -1))))

    (defun prot-orderless-flex-dispatcher (pattern _index _total)
      "Flex  dispatcher using the tilde suffix.
  It matches PATTERN _INDEX and _TOTAL according to how Orderless
  parses its input."
      (when (string-suffix-p "." pattern)
        `(orderless-flex . ,(substring pattern 0 -1))))
#+end_src



#+Local Variables: 
#+eval: (add-hook 'after-save-hook (lambda () (when (y-or-n-p "Tangle?") (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle)))) nil t) 
#+End:
