;; -*- lexical-binding: t; -*-
;; Note: This file is automatically generated from default.org.  
;; Please do not edit this file directly but init.org instead.

(setq inhibit-default-init t)

(dolist (symbol '(dired-find-alternate-file
                  downcase-region
                  eval-expression
                  narrow-to-page
                  narrow-to-region
                  scroll-left
                  upcase-region))
  (put symbol 'disable nil))

(add-to-list 'load-path (expand-file-name "scripts/" "~/.config/emacs/"))

;;;;* Load Customizations
(unless (and (boundp 'custom-file)
	     custom-file
	     (file-writable-p custom-file))
  (let ((default-custom-file (expand-file-name "custom.el"
					       (file-name-directory load-file-name))))
    (setq custom-file default-custom-file)))

(setopt column-number-mode t
        global-display-line-numbers-mode t)

(let ((hooks '(org-mode-hook dired-mode-hook treemacs-mode-hook term-mode-hook shell-mode-hook ehell-mode-hook)))
(dolist (hook hooks)
  (add-hook hook (lambda () (display-line-numbers-mode 0))))
)

(defvar oa-proxy-connect:*process* nil
  "Contains the process of ch.swisslife.ProxyConnect.")
(defun oa-proxy-connect:start ()
  "Start ch.swisslife.ProxyConnect and return the process object."
  (interactive)
  (unless (process-live-p oa-proxy-connect:*process*)
    (setq oa-proxy-connect:*process* (start-process "proxy-connect" nil "proxy-connect"))))
(defun oa-proxy-connect:stop ()
  "Stop ch.swisslife.ProxyConnect and return `true' if a running process has been stopped, `nil' else."
  (interactive)
  (when-let ((livep (process-live-p oa-proxy-connect:*process*)))
    (delete-process oa-proxy-connect:*process*)
    (setq oa-proxy-connect:*process* nil)
    livep))

(setopt url-proxy-services
        '(("no_proxy" . "^\\\\(localhost\\\\|10\\\\..*\\\\|192\\\\.168\\\\..*\\\\)")
          ("http" . "localhost:8080")
          ("https" . "localhost:8080")))

(oa-proxy-connect:start)

(require 'package)

(setopt package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")
          ("org" . "http://orgmode.org/elpa/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setopt use-package-always-ensure t)

(use-package emacs
  :ensure nil
  :custom
  (savehist-mode t)
  (recentf-mode t))

(use-package general)

(use-package all-the-icons)

(use-package vertico
  :custom
  (vertico-cycle t)
  (vertico-mode 1))

(use-package marginalia
  :custom (marginalia-mode 1))

(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :custom (all-the-icons-completion-mode 1))

(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)    ; I want to be in control!
  (completion-category-overrides
   '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
		   orderless))))
  (orderless-component-separator 'orderless-escapable-split-on-space)
  (orderless-matching-styles
   '(orderless-literal
     orderless-prefixes
     orderless-initialism
     orderless-regexp
     ;; orderless-flex
     ;; orderless-strict-leading-initialism
     ;; orderless-strict-initialism
     ;; orderless-strict-full-initialism
     ;; orderless-without-literal          ; Recommended for dispatches instead
     ))
  (orderless-style-dispatchers
   '(prot-orderless-literal-dispatcher
     prot-orderless-strict-initialism-dispatcher
     prot-orderless-flex-dispatcher))
  :config
  (load-file (expand-file-name "~/.config/emacs/scripts/orderless-utils.el")))

(use-package consult)

(use-package embark
  :bind (("C-." . embark-act)
         :map minibuffer-local-map
              ("C-c C-c" . embark-collect)
              ("C-c C-e" . embark-export)))

(use-package embark-consult)

(use-package corfu
  :init
  (defun corfu-maybe-enable-in-minibuffer ()
    "Enable Corfu in some minibuffers."
    (when (local-variable-p 'completion-at-point-functions)
      (setq-local corfu-auto t)
      (setq-local corfu-echo-delay nil)
      (corfu-mode 1)))
  :config
  (add-hook 'minibuffer-setup-hook #'corfu-maybe-enable-in-minibuffer)
  (global-corfu-mode)
  (corfu-popupinfo-mode))

(use-package which-key
  :config (which-key-mode)
  :diminish which-key-mode
  :custom (which-key-idle-delay 0.5))

(use-package helpful
  :ensure t
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))

(use-package ace-window
  :bind
  (("C-$" . ace-window)))

(use-package wgrep
  :bind
  (:map grep-mode-map
	("e" . wgrep-change-to-wgrep-mode)
	("C-x C-q" . wgrep-change-to-wgrep-mode)
	("C-c C-c" . wgrep-finish-edit)))

(use-package rg)

(use-package multiple-cursors)

(use-package iedit
  :config
  (defun iedit-dwim (arg)
    "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
    (interactive "P")
    (if arg
	(iedit-mode)
      (save-excursion
	(save-restriction
	  (widen)
	  ;; this function determines the scope of `iedit-start'.
	  (if iedit-mode
	      (iedit-done)
	    ;; `current-word' can of course be replaced by other
	    ;; functions.
	    (narrow-to-defun)
	    (iedit-start (current-word) (point-min) (point-max)))))))
  :bind
  (( "C-;" . iedit-dwim)))

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package magit-filenotify)

(use-package git-timemachine)

(use-package git-modes)

(use-package org
  :pin org

  :hook
  ((org-mode . visual-line-mode)
   (org-mode . variable-pitch-mode)
   (org-mode . org-indent-mode))

  :bind
  ("C-c j" . (lambda () (interactive) (org-capture nil "jj")))

  :config
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (defface cantarell-regular '((default :font "Cantarell" :weight regular))
    "The Cantarell regular font used for `org-mode' headers.")
  (dolist (face '((org-level-1 :inherit cantarell-regular :height 1.3)
                  (org-level-2 :inherit cantarell-regular :height 1.25)
                  (org-level-3 :inherit cantarell-regular :height 1.2)
                  (org-level-4 :inherit cantarell-regular :height 1.15)
                  (org-level-5 :inherit cantarell-regular :height 1.1)
                  (org-level-6 :inherit cantarell-regular :height 1.1)
                  (org-level-7 :inherit cantarell-regular :height 1.1)
                  (org-level-8 :inherit cantarell-regular :height 1.1)
                  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
                  (org-block     :foreground nil :inherit fixed-pitch)
                  (org-table     :inherit fixed-pitch)
                  (org-formula   :inherit fixed-pitch)
                  (org-code      :inherit (shadow fixed-pitch))
                  (org-table     :inherit (shadow fixed-pitch))
                  (org-verbatim  :inherit (shadow fixed-pitch))
                  (org-special-keyword  :inherit (font-lock-comment-face fixed-pitch))
                  (org-meta-line :inherit (font-lock-comment-face fixed-pitch))
                  (org-checkbox  :inherit fixed-pitch)))
    (apply 'set-face-attribute (cl-first face) nil (cl-rest face)))

  :custom

  (org-ellipsis " ▾")

  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)

  (org-agenda-files
   '("~/Projects/Code/emacs/OrgFiles/Tasks.org"
     "~/Projects/Code/emacs/OrgFiles/Habits.org"
     "~/Projects/Code/emacs/OrgFiles/Birthdays.org"))

  (org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
     (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (org-tag-alist
   '((:startgroup)
     ;; Put mutually exclusive tags here
     (:endgroup)
     ("@errand" . ?E)
     ("@home" . ?H)
     ("@work" . ?W)
     ("agenda" . ?a)
     ("planning" . ?p)
     ("publish" . ?P)
     ("batch" . ?b)
     ("note" . ?n)
     ("idea" . ?i)))

  (org-refile-targets
   '(("Archive.org" :maxlevel . 1)
     ("Tasks.org" :maxlevel . 1)))

  ;; Configure custom agenda views
  (org-agenda-custom-commands
   '(("d" "Dashboard"
      ((agenda "" ((org-deadline-warning-days 7)))
       (todo "NEXT"
             ((org-agenda-overriding-header "Next Tasks")))
       (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

     ("n" "Next Tasks"
      ((todo "NEXT"
             ((org-agenda-overriding-header "Next Tasks")))))

     ("W" "Work Tasks" tags-todo "+work-email")

     ;; Low-effort next actions
     ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
      ((org-agenda-overriding-header "Low Effort Tasks")
       (org-agenda-max-todos 20)
       (org-agenda-files org-agenda-files)))

     ("w" "Workflow Status"
      ((todo "WAIT"
             ((org-agenda-overriding-header "Waiting on External")
              (org-agenda-files org-agenda-files)))
       (todo "REVIEW"
             ((org-agenda-overriding-header "In Review")
              (org-agenda-files org-agenda-files)))
       (todo "PLAN"
             ((org-agenda-overriding-header "In Planning")
              (org-agenda-todo-list-sublevels nil)
              (org-agenda-files org-agenda-files)))
       (todo "BACKLOG"
             ((org-agenda-overriding-header "Project Backlog")
              (org-agenda-todo-list-sublevels nil)
              (org-agenda-files org-agenda-files)))
       (todo "READY"
             ((org-agenda-overriding-header "Ready for Work")
              (org-agenda-files org-agenda-files)))
       (todo "ACTIVE"
             ((org-agenda-overriding-header "Active Projects")
              (org-agenda-files org-agenda-files)))
       (todo "COMPLETED"
             ((org-agenda-overriding-header "Completed Projects")
              (org-agenda-files org-agenda-files)))
       (todo "CANC"
             ((org-agenda-overriding-header "Cancelled Projects")
              (org-agenda-files org-agenda-files)))))))

  (org-capture-templates
   `(("t" "Tasks / Projects")
     ("tt" "Task" entry (file+olp "Tasks.org" "Inbox")
      "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

     ("j" "Journal Entries")
     ("jj" "Journal" entry
      (file+olp+datetree "Journal.org")
      "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
      ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
      :clock-in :clock-resume
      :empty-lines 1)
     ("jm" "Meeting" entry
      (file+olp+datetree "Journal.org")
      "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
      :clock-in :clock-resume
      :empty-lines 1)

     ("w" "Workflows")
     ("we" "Checking Email" entry (file+olp+datetree "Journal.org")
      "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

     ("m" "Metrics Capture")
     ("mw" "Weight" table-line (file+headline "Metrics.org" "Weight")
      "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (org-habit-graph-column 60))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(use-package visual-fill-column
  :after org
  :hook (org-mode . visual-fill-column-mode)
  :custom
  (visual-fill-column-width 100)
  (visual-fill-column-center-text t))

(use-package org-download
  :after (org dired)
  :hook (dired-mode . org-download-enable))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

;; This is needed as of Org 9.2
(require 'org-tempo)

(dolist (template '(("sh" . "src shell")
                    ("el" . "src emacs-lisp")
                    ("py" . "src python")))
  (add-to-list 'org-structure-template-alist template))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook
  ((lsp-mode . lsp-headerline-breadcrumb-mode)
   (lsp-mode . (lambda ()
		 (keymap-local-set lsp-keymap-prefix lsp-command-map)))
   (lsp-mode . lsp-enable-which-key-integration))
  :custom
  (lsp-keymap-prefix "C-c l"))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)

(defun oa:init-isearch-mode-map ()
  (make-local-variable 'isearch-mode-map)
  (define-key isearch-mode-map "\C-w" 'isearch-yank-symbolic-word-or-char))

(add-hook 'emacs-lisp-mode-hook 'oa:init-isearch-mode-map)
(add-hook 'lisp-mode-hook 'oa:init-isearch-mode-map)

(use-package paren-face)

(use-package highlight-parentheses
  :hook
  ((emacs-lisp-mode lisp-mode) . highlight-parentheses-mode))

(use-package highlight-stages
  :config (highlight-stages-global-mode 1))

(use-package paredit
  :bind (:map paredit-mode-map
              ([return] . paredit-newline)
              ([C-return] . comment-indent-new-line))
  :hook
  ((emacs-lisp-mode lisp-mode) . paredit-mode))

(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook
          (lambda () (local-set-key [C-S-return] 'eval-print-last-sexp)))

(add-hook 'lisp-mode-hook
          (lambda () (setq lisp-indent-function 'common-lisp-indent-function)))

(add-hook (derived-mode-hook-name 'shell-mode)
          (lambda () (set-buffer-process-coding-system 'cp850-dos 'cp850-dos)))

(use-package eshell-git-prompt)

(use-package eshell
  :config
  (eshell-git-prompt-use-theme 'powerline))

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom
  (dired-listing-switches "-AGFhlv --group-directories-first --time-style=iso --dired --color"))

(use-package dired-single)

(use-package dired-git-info)

(use-package dired-k)

(use-package dired-quick-sort)

(use-package dired-rainbow)

(use-package dired-subtree)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open)

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode))

(load custom-file t t t t)
